// Вспомогательные функции для сервера

/**
 * Транслитерация кириллицы в латиницу с обработкой edge cases
 *
 * Обрабатывает:
 * - Кириллица → латиница (включая ё → yo)
 * - Пробелы → подчёркивания
 * - Emoji удаляются
 * - Специальные символы удаляются
 * - Множественные пробелы → один underscore
 * - Длинные имена обрезаются (макс 50 символов)
 * - Trim underscores с начала и конца
 *
 * @param {string} text - Текст для транслитерации
 * @returns {string} Транслитерированный текст (safe для использования в filename)
 */
function transliterate(text) {
    // Проверка на пустую строку или не-строку
    if (!text || typeof text !== 'string') {
        return '';
    }

    // Карта транслитерации кириллицы
    const map = {
        'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ё': 'yo',
        'ж': 'zh', 'з': 'z', 'и': 'i', 'й': 'y', 'к': 'k', 'л': 'l', 'м': 'm',
        'н': 'n', 'о': 'o', 'п': 'p', 'р': 'r', 'с': 's', 'т': 't', 'у': 'u',
        'ф': 'f', 'х': 'h', 'ц': 'ts', 'ч': 'ch', 'ш': 'sh', 'щ': 'sch',
        'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu', 'я': 'ya',
        ' ': '_'
    };

    return text
        .toLowerCase()                                 // Приводим к нижнему регистру
        .split('')                                     // Разбиваем на символы
        .map(char => {
            // Если в карте - используем транслитерацию
            if (map[char] !== undefined) {
                return map[char];
            }
            // Если латинская буква или цифра - оставляем
            if (char.match(/[a-z0-9]/)) {
                return char;
            }
            // Если дефис или underscore - оставляем
            if (char === '-' || char === '_') {
                return char;
            }
            // Всё остальное (emoji, спецсимволы) - удаляем
            return '';
        })
        .join('')                                      // Собираем обратно
        .replace(/_{2,}/g, '_')                        // Множественные underscores → один
        .replace(/^_+|_+$/g, '')                       // Trim underscores с начала и конца
        .replace(/-{2,}/g, '-')                        // Множественные дефисы → один
        .replace(/^-+|-+$/g, '')                       // Trim дефисов с начала и конца
        .slice(0, 50)                                  // Ограничение длины (50 символов)
        .replace(/_+$|^_+/g, '');                      // Final trim (на случай если slice отрезал в середине слова)
}


/**
 * Генерация UUID v4 (12 символов)
 * @returns {string} UUID
 */
function generateId() {
    return 'xxxxxxxxxxxx'.replace(/x/g, () => {
        return (Math.random() * 16 | 0).toString(16);
    });
}

module.exports = {
    transliterate,
    generateId
};
