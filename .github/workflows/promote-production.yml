name: Promote to Production

on:
  # –¢—Ä–∏–≥–≥–µ—Ä 1: Git tag (v*.*.*)
  push:
    tags:
      - 'v*.*.*'
  
  # –¢—Ä–∏–≥–≥–µ—Ä 2: Manual workflow dispatch
  workflow_dispatch:
    inputs:
      staging_tag:
        description: 'Staging image tag to promote (e.g., staging-abc123 or staging)'
        required: true
        default: 'staging'
      skip_tests:
        description: 'Skip tests (only for emergency hotfixes)'
        type: boolean
        required: false
        default: false

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Test summary
        run: echo "‚úÖ All tests passed"

  check-staging-health:
    name: Check Staging Health
    runs-on: ubuntu-latest
    needs: [test]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')
    steps:
      - name: Check staging is healthy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "üè• Checking staging health..."
            curl -f http://localhost:3006/health || {
              echo "‚ùå Staging is unhealthy! Cannot promote to production."
              exit 1
            }
            echo "‚úÖ Staging is healthy"

  approval:
    name: Approval Required
    runs-on: ubuntu-latest
    needs: [check-staging-health]
    environment:
      name: production
      url: http://${{ secrets.SERVER_HOST }}:3005
    steps:
      - name: Wait for approval
        run: |
          echo "‚è≥ Waiting for admin approval..."
          echo "‚úÖ Approved! Proceeding with production deployment..."

  promote-to-production:
    name: Promote to Production
    runs-on: ubuntu-latest
    needs: [approval]
    steps:
      - uses: actions/checkout@v3

      - name: Determine image tag
        id: tag
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            # Git tag push
            echo "image_tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "release_version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            # Manual workflow dispatch
            echo "image_tag=${{ inputs.staging_tag }}" >> $GITHUB_OUTPUT
            echo "release_version=manual-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull and retag staging image for production
        run: |
          # Pull staging –æ–±—Ä–∞–∑
          docker pull ${{ secrets.DOCKER_USERNAME }}/quote-calculator:staging
          
          # Retag –¥–ª—è production
          docker tag ${{ secrets.DOCKER_USERNAME }}/quote-calculator:staging \
                     ${{ secrets.DOCKER_USERNAME }}/quote-calculator:latest
          
          docker tag ${{ secrets.DOCKER_USERNAME }}/quote-calculator:staging \
                     ${{ secrets.DOCKER_USERNAME }}/quote-calculator:${{ steps.tag.outputs.release_version }}
          
          # Push production –æ–±—Ä–∞–∑—ã
          docker push ${{ secrets.DOCKER_USERNAME }}/quote-calculator:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/quote-calculator:${{ steps.tag.outputs.release_version }}

      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/quote-calculator
            
            echo "üöÄ Promoting staging to PRODUCTION..."
            echo "üì¶ Version: ${{ steps.tag.outputs.release_version }}"
            
            # Backup production –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
            ./scripts/pre-deploy-backup.sh
            
            # Pull –Ω–æ–≤—ã–π production –æ–±—Ä–∞–∑
            docker pull ${{ secrets.DOCKER_USERNAME }}/quote-calculator:latest
            
            # Zero-downtime deployment
            ./scripts/deploy.sh
            
            # Health check
            sleep 10
            ./scripts/health-check.sh || {
              echo "‚ùå Production health check failed! Rolling back..."
              ./scripts/rollback.sh
              exit 1
            }
            
            echo "‚úÖ Production deployment successful!"
            echo "üìä Version: ${{ steps.tag.outputs.release_version }}"

      - name: Create GitHub Release
        if: github.event_name == 'push'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Production Deployment
            
            **Version:** ${{ github.ref_name }}
            **Deployed:** ${{ github.event.head_commit.timestamp }}
            **Commit:** ${{ github.sha }}
            
            ### Changes
            See commits for details.
            
            ### Deployment Info
            - ‚úÖ Tests passed
            - ‚úÖ Staging verified
            - ‚úÖ Production deployed
            - üîó Production URL: http://${{ secrets.SERVER_HOST }}:3005
          draft: false
          prerelease: false

      - name: Notify success
        if: success()
        run: |
          echo "‚úÖ Production promotion successful!"
          echo "üì¶ Version: ${{ steps.tag.outputs.release_version }}"
          echo "üîó Production URL: http://${{ secrets.SERVER_HOST }}:3005"

      - name: Notify failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed!"
          echo "üîô Automatic rollback should have been triggered"
          exit 1
